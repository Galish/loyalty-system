// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecase/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Galish/loyalty-system/internal/app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAccrualUseCase is a mock of AccrualUseCase interface.
type MockAccrualUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualUseCaseMockRecorder
}

// MockAccrualUseCaseMockRecorder is the mock recorder for MockAccrualUseCase.
type MockAccrualUseCaseMockRecorder struct {
	mock *MockAccrualUseCase
}

// NewMockAccrualUseCase creates a new mock instance.
func NewMockAccrualUseCase(ctrl *gomock.Controller) *MockAccrualUseCase {
	mock := &MockAccrualUseCase{ctrl: ctrl}
	mock.recorder = &MockAccrualUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualUseCase) EXPECT() *MockAccrualUseCaseMockRecorder {
	return m.recorder
}

// GetAccrual mocks base method.
func (m *MockAccrualUseCase) GetAccrual(arg0 context.Context, arg1 *entity.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAccrual", arg0, arg1)
}

// GetAccrual indicates an expected call of GetAccrual.
func (mr *MockAccrualUseCaseMockRecorder) GetAccrual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrual", reflect.TypeOf((*MockAccrualUseCase)(nil).GetAccrual), arg0, arg1)
}

// MockBalanceUseCase is a mock of BalanceUseCase interface.
type MockBalanceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceUseCaseMockRecorder
}

// MockBalanceUseCaseMockRecorder is the mock recorder for MockBalanceUseCase.
type MockBalanceUseCaseMockRecorder struct {
	mock *MockBalanceUseCase
}

// NewMockBalanceUseCase creates a new mock instance.
func NewMockBalanceUseCase(ctrl *gomock.Controller) *MockBalanceUseCase {
	mock := &MockBalanceUseCase{ctrl: ctrl}
	mock.recorder = &MockBalanceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceUseCase) EXPECT() *MockBalanceUseCaseMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBalanceUseCase) GetBalance(arg0 context.Context, arg1 string) (*entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(*entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceUseCaseMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceUseCase)(nil).GetBalance), arg0, arg1)
}

// Withdraw mocks base method.
func (m *MockBalanceUseCase) Withdraw(arg0 context.Context, arg1 *entity.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceUseCaseMockRecorder) Withdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceUseCase)(nil).Withdraw), arg0, arg1)
}

// Withdrawals mocks base method.
func (m *MockBalanceUseCase) Withdrawals(arg0 context.Context, arg1 string) ([]*entity.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockBalanceUseCaseMockRecorder) Withdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockBalanceUseCase)(nil).Withdrawals), arg0, arg1)
}

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderUseCase) AddOrder(arg0 context.Context, arg1 entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderUseCaseMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderUseCase)(nil).AddOrder), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockOrderUseCase) GetOrders(arg0 context.Context, arg1 string) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUseCaseMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetOrders), arg0, arg1)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserUseCase) Authenticate(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserUseCaseMockRecorder) Authenticate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserUseCase)(nil).Authenticate), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockUserUseCase) Register(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserUseCaseMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCase)(nil).Register), arg0, arg1, arg2)
}
